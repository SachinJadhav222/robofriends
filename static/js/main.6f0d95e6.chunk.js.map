{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Crad","id","name","email","className","alt","src","CardList","robots","map","user","i","Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","robotFilter","this","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mOAemBA,EAbH,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,GAAGC,EAAc,EAAdA,KAAKC,EAAS,EAATA,MAElB,OACA,yBAAKC,UAAU,oDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,mBACjB,6BACI,4BAAKC,GACL,2BAAIC,MCqBDI,EA1BC,SAAC,GAAc,IAAZC,EAAW,EAAXA,OAWf,OACI,6BAEAA,EAAOC,KAAI,SAACC,EAAKC,GACb,OAAS,kBAACC,EAAD,CACLC,IAAKF,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCTtBW,EAZC,SAAC,GAAgC,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC5B,OACI,yBAAKZ,UAAU,OACX,2BACIa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEXI,EARD,SAACC,GAEX,OACI,yBAAKC,MAAO,CAACC,SAAS,SAAUC,OAAO,kBAAkBC,OAAO,UAC/DJ,EAAMK,SADP,MCyDOC,G,kBAlDX,aAAc,IAAD,8BACT,+CAiBJC,eAAe,SAACC,GACZ,EAAKC,SAAS,CAACf,YAAYc,EAAME,OAAOC,SAjBxC,EAAKC,MAAO,CACRzB,OAAO,GACPO,YAAY,IAJP,E,iFAQO,IAAD,OACfmB,MAAM,8CACLC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKR,SAAS,CAACtB,OAAO8B,S,+BASpB,IAAD,OACCC,EAAYC,KAAKP,MAAMzB,OAAOiC,QAAO,SAAAjC,GACvC,OAAOA,EAAON,KAAKwC,cAAcC,SAAS,EAAKV,MAAMlB,YAAY2B,kBAGrE,OAA8B,IAA3BF,KAAKP,MAAMzB,OAAOoC,OACV,iDAIH,yBAAKxC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAcwB,KAAKZ,iBAC1B,kBAAC,EAAD,KAEY,kBAAC,EAAD,CAAUpB,OAAQ+B,U,GAvCpCM,c,MCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDyH5B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.6f0d95e6.chunk.js","sourcesContent":["    import React from 'react';\n\n    const Crad =({id,name,email})=>{\n        //const =props;\n        return (\n        <div className='bg-light-green dib br4 pa3 ma2 grow bw2 shadow-5'>\n        <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n\n        );\n    }\n    export default Crad;","import React from 'react';\nimport Card from './Card'\n\n\n    const CardList =({ robots })=>{\n\n        // const cardComponant= \n        // robots.map((user,i)=>{\n        //     return ( <Card \n        //         key={i} \n        //         id={robots[i].id} \n        //         name={robots[i].name} \n        //         email={robots[i].email}/>)\n        // })\n        \n        return (\n            <div>\n           {\n            robots.map((user,i)=>{\n                return ( <Card \n                    key={i} \n                    id={robots[i].id} \n                    name={robots[i].name} \n                    email={robots[i].email}/>)\n            })\n        }\n            </div>\n\n        );\n    }\n    export default CardList;","import React from 'react';\n\nconst SearchBox=({ searchField, searchChange })=>{\n    return (\n        <div className='pa2'>\n            <input \n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n       \n    );\n}\nexport default SearchBox\n","import React from 'react'\n\nconst Scroll =(props)=>{\n    \n    return (\n        <div style={{overflow:'scroll', border:'5px solid black',height:'800px'}}>\n        {props.children};\n        </div>\n    )\n}\nexport default Scroll","import React ,{Component} from 'react';\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\n//import ErrorBoundary from '../components/ErrorBoundary'\nimport './App.css'\n\n//import '../SEGA.wolf'\n\n\n\nclass App extends Component{\n    constructor(){\n        super();\n        this.state ={\n            robots:[],\n            searchField:'',\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=>{\n            return response.json();\n        })\n        .then(users=>{\n            this.setState({robots:users})\n        })\n    }\n\n    onSearchChange=(event)=>{\n        this.setState({searchField:event.target.value})\n       \n    }\n\n    render (){\n        const robotFilter=this.state.robots.filter(robots=>{\n            return robots.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n        })\n\n        if(this.state.robots.length===0){\n            return <h1>Loading . . . . .</h1>\n        }\n        else{\n            return (\n                <div className='tc'>\n                    <h1 className='f1'>RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                        <Scroll>\n                              \n                                    <CardList robots={robotFilter} />\n                                \n                        </Scroll>\n                 </div>\n                 );\n        }\n\n        \n    }\n    \n \n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App'\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css'\n\nReactDOM.render(\n  <App/>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}